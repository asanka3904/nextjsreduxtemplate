import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

// import {fetchCount} from "../serverapi"

const initialState = {
  value: 0,
};

export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const testSlice = createSlice({
  name: "test",
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },

    decrement: (state) => {
      state.value -= 1;
    },

    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },

    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(incrementAsync.pending, (state) => {
          state.status = "loading";
        })
        .addCase(incrementAsync.fulfilled, (state, action) => {
          state.status = "idle";
          state.value += action.payload;
        });
    },
  },
});

export const { increment, decrement, incrementByAmount } = testSlice.actions;

export const selectCount = (state) => state.test.value;

export default testSlice.reducer;
